package HW;

import java.util.*;

public class Word {
    public static void main(String[] args) {
        String sentence = "1800-х годах, в те времена, когда не было еще ни железных, ни шоссейных дорог, ни газового, ни стеаринового света, ни пружинных низких диванов, ни мебели без лаку, ни разочарованных юношей со стеклышками, ни либеральных философов-женщин, ни милых дам-камелий, которых так много развелось в наше время, - в те наивные времена, когда из Москвы, выезжая в Петербург в повозке или карете, брали с собой целую кухню домашнего приготовления, ехали восемь суток по мягкой, пыльной или грязной дороге и верили в пожарские котлеты, в валдайские колокольчики и бублики, - когда в длинные осенние вечера нагорали сальные свечи, освещая семейные кружки из двадцати и тридцати человек, на балах в канделябры вставлялись восковые и спермацетовые свечи, когда мебель ставили симметрично, когда наши отцы были еще молоды не одним отсутствием морщин и седых волос, а стрелялись за женщин и из другого угла комнаты бросались поднимать нечаянно и не нечаянно уроненные платочки, наши матери носили коротенькие талии и огромные рукава и решали семейные дела выниманием билетиков, когда прелестные дамы-камелии прятались от дневного света, - в наивные времена масонских лож, мартинистов, тугендбунда, во времена Милорадовичей, Давыдовых, Пушкиных, - в губернском городе К. был съезд помещиков, и кончались дворянские выборы. ";

        // Разделяем предложение на слова регулярным выражением
        String[] words = sentence.toLowerCase().split( "[^а-яё]+" );
        // Создаем HashMap для хранения слов
        HashMap<String, Integer> wordCount = new HashMap<>();
        // Подсчитываем количество повторяющихся слов и общее количество слов
        int totalWords = 0; // счетчик
        for (String word : words) {// Перебираем каждое слово в массиве
            if (!word.isEmpty()) { // Проверяем, что слово не пустое

                // Добавляем слова в HashMap и общее количество слов
                wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
                totalWords++;// Увеличиваем счетчик
            }
        }
        // Выводим общее количество слов
        System.out.println("Total number of words: " + totalWords);

        // Преобразуем HashMap в список Map.Entry
        List<Map.Entry<String, Integer>> entryList = new ArrayList<>(wordCount.entrySet());

        // Сортируем список в порядке убывания
        entryList.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue()));

        // Создаем новую LinkedHashMap для сохранения отсортированных значений
        LinkedHashMap<String, Integer> sortedWord = new LinkedHashMap<>();
        for (Map.Entry<String, Integer> entry : entryList) {
            sortedWord.put(entry.getKey(), entry.getValue());

            // Выводим отсортированные результаты
            System.out.println(entry.getKey() + " : " + entry.getValue());
            }
        }
}



